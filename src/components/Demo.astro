<canvas id="c"></canvas>
<style>
  canvas#c {
    width: 100%;
    height: 100%;
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
    padding: 0;
    margin: 0;
  }
</style>
<script>
  // Material
  import { MeshStandardMaterial } from "three";

  const cyan = new MeshStandardMaterial({ color: 0x26bfb3, roughness: 0.3 });
  const white = new MeshStandardMaterial({ color: 0xdddddd, roughness: 0.3 });
  const yellow = new MeshStandardMaterial({ color: 0xffd500, roughness: 0.3 });
  const pink = new MeshStandardMaterial({ color: 0xff8095, roughness: 0.3 });

  // Meshes
  import { Mesh, SphereGeometry } from "three";
  const meshData = [
    { matrix: [0, 0, 0], geometry: 2.2, material: cyan },
    { matrix: [2.53, 2.3, -2.49], geometry: 0.2, material: yellow },
    { matrix: [-1.87, 2.54, -1.94], geometry: 0.5, material: pink },
    { matrix: [3.02, 1.21, -2.19], geometry: 0.8, material: white },
    { matrix: [0.24, -0.02, -3.53], geometry: 0.6, material: pink },
    { matrix: [0.27, 3.26, -3.24], geometry: 1.0, material: cyan },
    { matrix: [-1.51, -2.32, -1.91], geometry: 0.8, material: white },
    { matrix: [-1.64, -2.62, 1.98], geometry: 1.0, material: yellow },
    { matrix: [-1.12, 5.72, -3.21], geometry: 0.6, material: cyan },
    { matrix: [1.81, -2.77, -0.83], geometry: 0.8, material: cyan },
    { matrix: [1.7, -0.95, -2.66], geometry: 0.6, material: cyan },
    { matrix: [1.71, 3.3, -1.34], geometry: 0.5, material: white },
    { matrix: [-1.39, -4, 1.2], geometry: 0.5, material: white },
    { matrix: [0.33, -4.66, 2.06], geometry: 0.6, material: cyan },
  ];

  const meshes = meshData.map((v) => {
    const result = new Mesh(new SphereGeometry(v.geometry, 64, 32), v.material);
    result.position.set(v.matrix[0], v.matrix[1], v.matrix[2]);
    return result;
  });

  import {
    Scene,
    PerspectiveCamera,
    WebGLRenderer,
    DirectionalLight,
    Color,
    Clock,
    AmbientLight,
  } from "three";

  let x = 0;
  let y = 0;

  // Add event
  window.addEventListener("deviceorientation", onDeviceOrientation, true);

  function onDeviceOrientation(ev: DeviceOrientationEvent) {
    x = ev.gamma ? ev.gamma / 180 : x;
    y = ev.beta ? ev.beta / 180 : y;
  }

  window.addEventListener("mousemove", onMouseMove);

  function onMouseMove(ev: MouseEvent) {
    x = ev.x / screen.width - 0.5;
    y = ev.y / screen.height - 0.5;
  }

  // Clock
  const clock = new Clock();

  // Scene
  const scene = new Scene();
  scene.position.set(0, 0, 0);
  scene.background = new Color(0xf5f5f5);

  // Camera
  const fov = 60;
  const aspect = 1;
  const near = 0.1;
  const far = 100;
  const camera = new PerspectiveCamera(fov, aspect, near, far);
  camera.position.set(8, 0, 0);
  camera.rotation.y = Math.PI / 2;

  // Renderer
  const canvas = document.querySelector<HTMLCanvasElement>("#c")!;
  const renderer = new WebGLRenderer({ canvas, antialias: true });

  // Light
  const directionalLight = new DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(5, 10, 7.5);
  scene.add(directionalLight);

  const directionalFloorLight = new DirectionalLight(0xffffff, 0.05);
  directionalFloorLight.position.set(0, -1, 0);
  scene.add(directionalFloorLight);

  const ambientLight = new AmbientLight(0xffffff, 0.8);
  scene.add(ambientLight);

  // Object
  meshes.forEach((mesh) => {
    scene.add(mesh);
  });

  // For render
  function resizeRendererToDisplaySize(renderer: WebGLRenderer) {
    const canvas = renderer.domElement;
    const pixelRatio = window.devicePixelRatio;
    const width = (canvas.clientWidth * pixelRatio) | 0;
    const height = (canvas.clientHeight * pixelRatio) | 0;
    const needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
      renderer.setSize(width, height, false);
    }
    return needResize;
  }

  // Smooth move
  function lerp(a: number, b: number, t: number) {
    return a + (b - a) * t * 8;
  }

  // Render loop
  function render() {
    requestAnimationFrame(render);

    if (resizeRendererToDisplaySize(renderer)) {
      const canvas = renderer.domElement;
      camera.aspect = canvas.clientWidth / canvas.clientHeight;
      camera.updateProjectionMatrix();
    }

    const delta = clock.getDelta();

    camera.position.z = lerp(
      camera.position.z,
      x +
        0.8 +
        2.1 * (canvas.clientWidth / 1920) +
        Math.sin(clock.elapsedTime * 0.5) * 0.5,
      delta
    );
    camera.position.y = lerp(
      camera.position.y,
      y + Math.cos(clock.elapsedTime * 0.5) * 0.5,
      delta
    );

    renderer.render(scene, camera);
  }

  // Start
  render();
</script>
